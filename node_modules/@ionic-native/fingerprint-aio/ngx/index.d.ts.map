{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface FingerprintOptions {\n    /**\n     * Title in biometric prompt (android only)\n     * @default {APP_NAME} Biometric Sign On\n     */\n    title?: string;\n    /**\n     * Subtitle in biometric Prompt (android only)\n     * @default null\n     */\n    subtitle?: string;\n    /**\n     * Description in biometric Prompt\n     * @default null\n     */\n    description?: string;\n    /**\n     * Title of fallback button.\n     * @default \"Use Pin\"\n     */\n    fallbackButtonTitle?: string;\n    /**\n     * Title for cancel button on Android\n     * @default \"Cancel\"\n     */\n    cancelButtonTitle?: string;\n    /**\n     * Disable 'use backup' option.\n     * @default false\n     */\n    disableBackup?: boolean;\n}\nexport interface FingerprintSecretOptions extends FingerprintOptions {\n    /**\n     * String secret to encrypt and save, use simple strings matching the regex [a-zA-Z0-9\\-]+\n     */\n    secret: string;\n    /**\n     * If `true` secret will be deleted when biometry items are deleted or enrolled\n     * @default false\n     */\n    invalidateOnEnrollment?: boolean;\n}\n/**\n * @name Fingerprint AIO\n * @description\n * Use simple fingerprint authentication on Android and iOS.\n * Requires Cordova plugin: cordova-plugin-fingerprint-aio. For more info about plugin, vist: https://github.com/NiklasMerz/cordova-plugin-fingerprint-aio\n *\n * @usage\n * ```typescript\n * import { FingerprintAIO } from '@ionic-native/fingerprint-aio/ngx';\n *\n * constructor(private faio: FingerprintAIO) { }\n *\n * ...\n *\n * this.faio.show().then((result: any) => console.log(result)).catch((error: any) => console.log(error));\n *\n *  OR with options...\n *\n * this.faio.show({\n *     title: 'Biometric Authentication', // (Android Only) | optional | Default: \"<APP_NAME> Biometric Sign On\"\n *     subtitle: 'Coolest Plugin ever' // (Android Only) | optional | Default: null\n *     description: 'Please authenticate' // optional | Default: null\n *     fallbackButtonTitle: 'Use Backup', // optional | When disableBackup is false defaults to \"Use Pin\".\n *                                        // When disableBackup is true defaults to \"Cancel\"\n *     disableBackup:true,  // optional | default: false\n * })\n * .then((result: any) => console.log(result))\n * .catch((error: any) => console.log(error));\n *\n * ...\n *\n * this.faio.registerBiometricSecret({\n *      description: \"Some biometric description\", // optional | Default: null\n *      secret: \"my-super-secret\", // mandatory\n *      invalidateOnEnrollment: true, // optional | Default: false\n *      disableBackup: true, // (Android Only) | optional | always `true` on Android\n * })\n * .then((result: any) => console.log(result))\n * .catch((error: any) => console.log(error));\n *\n *  ...\n *\n * this.faio.loadBiometricSecret({\n *      description: \"Some biometric description\", // optional | Default: null\n *      disableBackup: true, // always disabled on Android\n * })\n * .then((result: string) => console.log(result))\n * .catch((error: any) => console.log(error));\n *\n * ```\n * @interfaces\n * FingerprintOptions\n * FingerprintSecretOptions\n */\nexport declare class FingerprintAIO extends IonicNativePlugin {\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_UNKNOWN_ERROR: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_UNAVAILABLE: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_AUTHENTICATION_FAILED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_SDK_NOT_SUPPORTED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_HARDWARE_NOT_SUPPORTED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_PERMISSION_NOT_GRANTED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_NOT_ENROLLED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_INTERNAL_PLUGIN_ERROR: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_DISMISSED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_PIN_OR_PATTERN_DISMISSED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_SCREEN_GUARD_UNSECURED: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_LOCKED_OUT: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_LOCKED_OUT_PERMANENT: number;\n    /**\n     * Convenience constant\n     * @type {number}\n     */\n    BIOMETRIC_SECRET_NOT_FOUND: number;\n    /**\n     * Check if fingerprint authentication is available\n     * @return {Promise<any>} Returns a promise with result\n     */\n    isAvailable(): Promise<any>;\n    /**\n     * Show authentication dialogue and register secret\n     * @param {FingerprintSecretOptions} options Options for platform specific fingerprint API\n     * @return {Promise<any>} Returns a promise that resolves when authentication was successful\n     */\n    registerBiometricSecret(options: FingerprintSecretOptions): Promise<any>;\n    /**\n     * Show authentication dialogue and load secret\n     * @param {FingerprintOptions} options Options for platform specific fingerprint API\n     * @return {Promise<any>} Returns a promise that resolves when authentication was successful\n     */\n    loadBiometricSecret(options: FingerprintOptions): Promise<string>;\n    /**\n     * Show authentication dialogue\n     * @param {FingerprintOptions} options Options for platform specific fingerprint API\n     * @return {Promise<any>} Returns a promise that resolves when authentication was successful\n     */\n    show(options: FingerprintOptions): Promise<any>;\n}\n"]}